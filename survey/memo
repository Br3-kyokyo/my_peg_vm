POSTFIX <- ’(’ ’postfix’ NUM COMMAND* ’)’
COMMAND <- NUM / RESERVED / ’(’ COMMAND+ ’)’
NUM <- [0-9]+


PEは、choiceか、seq?　’(’ COMMAND+ ’)’ はseq 
一つ一つの塊を、Term(項)とする。
termをchoiceする

termは、丸括弧で囲われた塊か、角括弧で囲まれた文字列か、空白を挟まない一つづきの文字列か、クオーテーションで囲まれた文字列。
これらには、?, *, +, !, &の接頭辞、接尾辞がつく。

字句解析する？


先読み記号や？記号などは、単体についているか、括弧の直前についている




S <- &( A !’b’ ) ’a’+ B !. 
A <- ’a’ A? ’b’
B <- ’b’ B? ’c’

\&|\(|\)|\[|\]\+|\*|\!|\?|\.|\-|[0-9]+|([a-zA-Z]+)|\"[a-zA-z]+\"

POSTFIX <- ’(’ ’postfix’ NUM COMMAND* ’)’
COMMAND <- NUM / ’(’ COMMAND+ ’)’
NUM <- [0-9]+


POSTFIX <- '(' "postfix" NUM COMMAND* ')'
COMMAND <- NUM / '(' COMMAND+ ')'
NUM <- [0-9]+

POSTFIX <- SPC* '(' SPC* "postfix" SPC+ NUM SPC+ COMMAND* SPC+ ')'
COMMAND <- NUM / '(' SPC* COMMAND+ SPC* ')'
NUM <- [0-9]+
SPC <- ' '

(postfix 0 10 (swap 2 mul sub) 1 swap exec)


-- OK

POSTFIX <- '(' COMMAND* ')'
COMMAND <- NUM SPC / '(' COMMAND+ ')' SPC
NUM <- '0'
SPC <- ' '

((0 0 0 0 ) 0 0 0 )

--

--- OK

postfix <- ws '(' ws "postfix" ws num ws command* ws ')' ws
command <- num ws / reserved ws / '(' command+ ')' ws
num <- [0-9]+
reserved <- "add" / "mul" / "sub" / "div" / "exec" / "swap"
ws <- ( '\x09' / '\x0a' / '\x0d' / '\x20' ws )?

(postfix 0 10 (swap 2 mul sub) 1 swap exec)

---
ちょっと文法を間違えるだけで無限ループが発生したりする
これはなんとかしたい

どうする？
無限ループが発生しそうなところにはシンタックスハイライトを…
文法が間違っているところにもシンタックスハイライトをやりたい…
さ

--

論文のjsonPEGがめちゃくちゃ間違っている気がする



---

解析が失敗したときにそれがどこの文法規則で失敗したのか出力したい
callでリターンエントリを積む
returnでリターンエントリをpopしてそこのpcに飛ぶ
文法規則が成功した場合はreturnエントリがpopされる
callでリターンエントリを積むときに非終端記号の文字も積めばいいのでは？
そのためには、call命令に非終端記号の文字も含む必要がある。


LL(1)文法などの予言的再帰下降分析であれば、エラーが起こったときにどこでエラーが起こったのかというのが特定することができるが
バックトラックのある解析においては、どこがエラー箇所なのか一意に決めることができないのでは？


最後にバックトラックが起こった場所をエラー箇所とする？


--- 20200909

vmでエラーが起こった時に、どの規則でエラーが起こったのかわからない
賢いエラーを出したいがどうする？
期待される値を提示したいのだが難しい



--- 

log operation を追加することで、vmにおけるエラーの問題切り分けを行えるようにした。

--- 20200916

packrat parser化の前に、最適化命令を実装した。

後、意味を与えたい。


--- 20200916

A Parsing Machine for Parsing Expression Grammers with Labeled Failures

ABSTRACT
- Labeled failureを用いることで、シンタックスエラーのクオリティをあげることができる。
- PEGの意味論をラベル付失敗に対応するように拡張し、Virtual Parsing Machineもそれに対応して拡張する。


--- 20200917

矢口さんの論文から引っ張ってきたPEGを用いてjavaが通るかのテスト
javaソースが通らなかったので、いろいろバグを取り除いたりした。コンパイラ＆VMとPEGの双方を直した。
とりあえず、ネットから拾ってきた適当なjava1.4ソースが通ることは確認した。

エラーが起こった箇所のprogram counterから、どの規則がエラーを起こしたのか確認して、あとはpegと睨めっこして何とかエラーの原因を見つけた。

Function.javaの中のエスケープ解除用コードを自家製に書き換える必要がありそう。


--- 20200919 json.input


nonmemo

btnum:401002
loop:869340
memo:0
開始時刻：1600517137815 ms
終了時刻：1600517137942 ms
処理時間：127 ms


btnum:401002
loop:869340
memo:0
開始時刻：1600517174453 ms
終了時刻：1600517174573 ms
処理時間：120 ms

memo

btnum:296074
loop:656511
memo:290
開始時刻：1600517188082 ms
終了時刻：1600517188285 ms
処理時間：203 ms

btnum:296074
loop:656511
memo:290
開始時刻：1600517200599 ms
終了時刻：1600517200777 ms
処理時間：178 ms

memo with array

btnum:296074
loop:656511
memo:290
開始時刻：1600517306368 ms
終了時刻：1600517306492 ms
処理時間：124 ms

btnum:296074
loop:656511
memo:290
開始時刻：1600517312843 ms
終了時刻：1600517313001 ms
処理時間：158 ms

btnum:296074
loop:656511
memo:290
開始時刻：1600517319915 ms
終了時刻：1600517320053 ms
処理時間：138 ms


--- 

memo with array - json2

開始時刻：1600517547688 ms
btnum:514202944
loop:1169710599
memo:200002
終了時刻：1600517781763 ms
処理時間：234075 ms

memo 

開始時刻：1600518025921 ms
btnum:514202944
loop:1169710599
memo:200002
終了時刻：1600518068948 ms
処理時間：43027 ms

nonmemo

開始時刻：1600517819947 ms
btnum:692408578
loop:1520996127
memo:0
終了時刻：1600517843983 ms
処理時間：24036 ms
